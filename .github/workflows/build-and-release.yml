name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write  # Required for creating releases
      packages: read   # Required for downloading packages

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for git describe

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Extract version information
      id: version
      run: |
        if ("${{ github.ref_type }}" -eq "tag") {
          # For tagged releases, use the tag name (remove 'v' prefix if present)
          $version = "${{ github.ref_name }}" -replace '^v', ''
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "is_release=true" >> $env:GITHUB_OUTPUT
        } else {
          # For non-tagged builds, use git describe with fallback
          try {
            $gitVersion = git describe --tags --always --dirty 2>$null
            if ($LASTEXITCODE -eq 0 -and $gitVersion) {
              $version = $gitVersion -replace '^v', ''
            } else {
              # Fallback to commit SHA
              $version = "1.0.0-dev+$("${{ github.sha }}".Substring(0,7))"
            }
          } catch {
            $version = "1.0.0-dev+$("${{ github.sha }}".Substring(0,7))"
          }
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "is_release=false" >> $env:GITHUB_OUTPUT
        }
        echo "Detected version: $version"

    - name: Restore dependencies
      run: dotnet restore --runtime win-x64

    - name: Build
      run: |
        dotnet build --no-restore --configuration Release `
          -p:Version="${{ steps.version.outputs.version }}" `
          -p:AssemblyVersion="${{ steps.version.outputs.version }}" `
          -p:FileVersion="${{ steps.version.outputs.version }}" `
          -p:InformationalVersion="${{ steps.version.outputs.version }}"

    - name: Test
      run: |
        # Run unit tests (always work)
        dotnet test tests/Everything.Interop.Tests/Everything.Interop.Tests.csproj --no-build --configuration Release --verbosity normal

        # Try to run integration tests (requires Everything.exe)
        # Install Everything if not present, then run integration tests
        $everythingPath = "${env:ProgramFiles}\Everything\Everything.exe"
        if (Test-Path $everythingPath) {
          Write-Host "Everything.exe found, running integration tests..."
          dotnet test tests/Everything.Integration.Tests/Everything.Integration.Tests.csproj --no-build --configuration Release --verbosity normal
        } else {
          Write-Host "Everything.exe not found, skipping integration tests in CI"
          Write-Host "Integration tests require Everything Search Engine to be installed and running"
        }

    - name: Publish MCP Server
      run: |
        dotnet publish src/Everything.Mcp/Everything.Mcp.csproj `
          --configuration Release `
          --output ./publish/mcp-server `
          --self-contained true `
          --runtime win-x64 `
          -p:Version="${{ steps.version.outputs.version }}" `
          -p:AssemblyVersion="${{ steps.version.outputs.version }}" `
          -p:FileVersion="${{ steps.version.outputs.version }}" `
          -p:InformationalVersion="${{ steps.version.outputs.version }}"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: everything-mcp-server
        path: ./publish/mcp-server/

    - name: Create package
      if: steps.version.outputs.is_release == 'true'
      run: |
        $version = "${{ steps.version.outputs.version }}"
        $packageName = "everything-mcp-v$version-win-x64"

        # Create package directory
        New-Item -ItemType Directory -Path "./packages/$packageName" -Force

        # Copy binaries
        Copy-Item -Path "./publish/mcp-server/*" -Destination "./packages/$packageName/" -Recurse

        # Create README for package
        @"
        # Everything MCP Server $version

        A Model Context Protocol (MCP) server that provides file search capabilities using Everything Search Engine.

        ## Prerequisites

        - Windows operating system
        - Everything Search Engine (https://www.voidtools.com/) installed and running

        ## Usage

        Run the MCP server:
        ``````
        everything-mcp.exe
        ``````

        The server accepts JSON-RPC requests on stdin and returns responses on stdout.

        ## Tools Available

        - `search_files`: General file/folder search with scope support
          - `query`: Search query (supports Everything syntax)
          - `scope`: Search scope ('current', 'recursive', 'system', 'path:/custom/path')
          - `include_metadata`: Include file metadata (optional, default: false)
          - `max_results`: Maximum number of results (optional, default: 100)

        - `search_in_project`: Search within a specific project directory
          - `project_path`: Root directory of the project
          - `pattern`: Search pattern (wildcards supported)
          - `include_metadata`: Include file metadata (optional)
          - `max_results`: Maximum number of results (optional)

        - `find_executable`: Find executable files by name
          - `name`: Name of the executable
          - `exact_match`: Use exact matching (optional)
          - `max_results`: Maximum number of results (optional)

        - `find_source_files`: Find source code files by language
          - `filename`: Base filename to search for
          - `extensions`: Language extensions (e.g., 'cs,js,py')
          - `include_metadata`: Include file metadata (optional)
          - `max_results`: Maximum number of results (optional)

        - `search_recent_files`: Find recently modified files
          - `hours`: Hours to look back
          - `pattern`: File pattern (optional)
          - `include_metadata`: Include file metadata (optional)
          - `max_results`: Maximum number of results (optional)

        - `find_config_files`: Find configuration files
          - `project_path`: Project directory (optional, null for global)
          - `include_metadata`: Include file metadata (optional)
          - `max_results`: Maximum number of results (optional)

        ## Example

        ``````json
        {
          "jsonrpc": "2.0",
          "id": 1,
          "method": "tools/call",
          "params": {
            "name": "search_files",
            "arguments": {
              "query": "*.txt",
              "scope": "recursive",
              "max_results": 10
            }
          }
        }
        ``````
        "@ | Out-File -FilePath "./packages/$packageName/README.md" -Encoding UTF8

        # Create zip package
        Compress-Archive -Path "./packages/$packageName" -DestinationPath "./packages/$packageName.zip"

    - name: Create Release
      if: steps.version.outputs.is_release == 'true'
      uses: softprops/action-gh-release@v1
      with:
        files: ./packages/*.zip
        body: |
          ## Everything MCP Server v${{ steps.version.outputs.version }}

          A Model Context Protocol server that provides file search capabilities using Everything Search Engine.

          ### Features
          - ‚ö° Lightning-fast file search using Everything IPC
          - üîç Support for Everything search syntax (wildcards, operators, etc.)
          - üìä Optional metadata retrieval (file size, dates, attributes)
          - üöÄ Dual-mode operation: fast basic search or detailed metadata search
          - üîå Standard MCP JSON-RPC interface

          ### Requirements
          - Windows operating system
          - Everything Search Engine installed and running

          ### Installation
          1. Download the `everything-mcp-v${{ steps.version.outputs.version }}-win-x64.zip` file
          2. Extract to desired location
          3. Ensure Everything Search Engine is installed and running
          4. Run `everything-mcp.exe`

          ### Usage with Claude Desktop
          Add to your Claude Desktop configuration:
          ```json
          {
            "mcpServers": {
              "everything": {
                "command": "path/to/everything-mcp.exe"
              }
            }
          }
          ```

          ### What's New
          See the [README](https://github.com/rweijnen/everything-mcp/blob/main/README.md) for complete feature documentation.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}